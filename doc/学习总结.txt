Java静态代理主要分成继承和聚合两类

一般认为聚合优于继承
1.在基本功能的基础上要添加多个额外功能，如时间统计，权限管理，日志处理等多个功能。用继承的话，继承层级过多。
2.用聚合，还可以灵活控制不同功能的顺序，如先时间统计，后日志处理或者先日志处理，后时间统计。
用聚合可以方便实现灵活控制顺序，用继承的话比较困难，需要写很多个实现类。


JDK动态代理
1.其机制基于接口，被代理对象需实现接口
2.代理的功能代码写在InvocationHandler接口实现类的invoke方法中，第二个参数method是代理方法，第三个参数是调用参数
3.Proxy.newProxyInstance获取动态代理
4.对于API使用者，只能追踪到接口，和实际实现类$ProxyXXX（自动生成）。
虽然封装隐藏比较好，但是因为无法使用原始类内部API，有时也感觉不方便。

CGLIB动态代理
其机制基于继承，被代理对象不能是final型的
代理的功能代码写在MethodInterceptor接口的实现类的intercept方法中

SimulateProxy
模仿JDK动态代理机制，简单实现动态代理
原理：动态生成类，动态载入类，动态实例化该类的动态对象
动态类的内容可参考静态代理